{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>In large Wi\u2011Fi systems, broadcast traffic can take up large amounts of airtime1. Partitioning a Wi\u2011Fi system into multiple subnets breaks handover while solutions like broadcast suppression break user functionality.</p> <p>WiMoVE is a scalable Wi\u2011Fi System that partitions stations into overlay L2 domains to limit the amount of wireless L2 broadcast traffic. Overlay L2 domains \"follow\" the stations, being resized on demand, thus preserving handover.</p> <p>WiMoVE is built with standard network protocols, on top of open\u2011source technology:</p> <ul> <li>The overlay networks use BGP EVPN with VXLAN encapsulation.</li> <li>All BGP speakers run FRRouting to exchange EVPN routes.</li> <li>The access points run OpenWrt with a custom, open\u2011source daemon called wimoved.</li> </ul> <p>This solution allows for using commodity access points running OpenWrt for large\u2011scale Wi\u2011Fi deployments, even from different vendors.</p> <p>A high-level explanation of the project can be seen in this presentation (German).</p>"},{"location":"#where-to-go-from-here","title":"Where to go from here","text":"<p>Architecture Overview Design Document Setup</p>"},{"location":"#about","title":"About","text":"<p>WiMoVE is a bachelor's project at Hasso\u2011Plattner\u2011Institute at the chair for Internet Technologies and Softwarization.</p> <p>The project was carried out by Aaron Schlitt, Alexander Sohn, Lina Wilske and Richard Wohlbold under the supervision of Holger Karl in partnership with BISDN GmbH.</p> <ol> <li> <p>See https://www.youtube.com/watch?v=v8y-r9JBhmw for a talk on this issue.\u00a0\u21a9</p> </li> </ol>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>As in a regular Wi\u2011Fi environment, there are stations which are connected to access points. WiMoVE partitions the stations into overlay networks which work like regular L2 domains:</p> <ul> <li>Inside of each overlay network, there is working L2 unicast, multicast and broadcast</li> <li>There is no connectivity between different overlay networks</li> </ul> <p>The overlay networks are terminated at the access points so that WiMoVE is transparent for the stations.</p> <p>There is one gateway that serves as IP Next Hop in all overlay networks, providing Internet access and L3 connectivity to other overlay networks. Central network functions like DHCP/DNS servers can also be deployed there.</p> <p>As a control plane, we use BGP EVPN. For more efficient route distribution, there is one route reflector which peers with the gateway and all Access Points. It should be possible to use BGP topologies without a central route reflector or with multiple route reflectors, but we haven't tested them yet.</p>"},{"location":"architecture/#assigning-stations-to-overlay-networks","title":"Assigning Stations to Overlay Networks","text":"<p>A station's overlay network is determined based on its MAC address. This has the advantage that the decision can be made locally on each access point without requiring further communication. In regular WPA2-PSK deployments, the security situation is not changed significantly through this assignment scheme.</p> <p>An advanced feature set could include an optional central service that is reponsible for assigning stations to overlay networks. This would offer more granular control over the assignment, e.g. for access control. There, authentication should not only be performed on a station's MAC address, but a proper authentication protocol like WPA2-EAP should be used.</p>"},{"location":"architecture/#example","title":"Example","text":"<p>Let's assume that there are four access points and four connected stations which are partitioned into three overlay networks. Every station is connected to a different access point. The access points can be in different L2 domains, only requiring L3 connectivity.</p> <p>Drawing each overlay L2 domain and its stations in different colors, we get the following overlay network structure:</p> <p></p> <p>Let us now assume that Sta3 roams from the third to the second AP. Then, the overlay L2 domains change to look like the following diagram:</p> <p></p> <p>We can also create a diagram of iBGP peerings:</p> <p></p>"},{"location":"architecture/#further-information","title":"Further Information","text":"<p>A more in-depth explanation of our design decisions is available in our design document.</p>"},{"location":"design/","title":"Design Document","text":"<p>Before implementing WiMoVE, we made some design decisions which we documented a design document. Click the button below to download the document.</p> <p>Download Design Document (PDF)</p>"},{"location":"setup/","title":"Setup Guide","text":""},{"location":"setup/#requirements","title":"Requirements","text":"<p>Before getting started, please make sure you have all hardware required for a working WiMoVE setup. You need:</p> <ul> <li>At least one Access Point running OpenWrt 22.03 or later</li> <li>One Ubuntu Server 22.10 or later machine to be used as a route reflector</li> <li>One Ubuntu Server 22.10 or later machine to be used as a gateway</li> </ul> <p>Info</p> <p>The route reflector and gateway can be combined into one machine. See the Ansible deployment guide for details.</p>"},{"location":"setup/#installation-methods","title":"Installation Methods","text":"<p>There are two different ways for setting up WiMoVE on your own hardware.</p>"},{"location":"setup/#setup-using-ansible-recommended","title":"Setup using Ansible (Recommended)","text":"<p>Since there are a number of services that need to be set up, we recommend using the Ansible installation method.</p> <p>Install using Ansible</p>"},{"location":"setup/#manual-setup","title":"Manual Setup","text":"<p>Alternatively, you can also set up all the components manually.</p> <p>Warning</p> <p>There are a number of tasks in this process that can be extremely repetitive (i.e., setting up interfaces, provisioning multiple routers). For this reason, we only recommend this option if you just want test WiMoVE in a small setup and are willing to try around a bit.</p> <p>Install manually</p>"},{"location":"setup/ansible_setup/","title":"Deployment Using Ansible","text":"<p>This guide will show you how you can install you own WiMoVE setup using our Ansible playbook. The playbook is designed to set up all components (APs, gateway, route reflector). It can however also be used to only set up parts of these components.</p> <p>Before you get started</p> <p>It is a very good idea to at least skim over the different steps of this guide so you know what to expect before you try to set up your own system.</p>"},{"location":"setup/ansible_setup/#getting-to-know-the-components","title":"Getting to Know the Components","text":"<p>The parts of this guide will provide information on how to set up each component. Before getting started, please make sure you understand the purpose of each component in the whole system by reading the Architecture page.</p> <p>WiMoVE provides a package you can install on your OpenWrt router (wimoved) but needs some additional services in your network to be useful:</p> <ul> <li>The gateway is responsible for terminating the overlay networks and provides internet access.</li> <li>The route reflector is part of the control plane. It receives routing information and distributes the information to the access points and the gateway.</li> </ul>"},{"location":"setup/ansible_setup/#clone-the-repository","title":"Clone the Repository","text":"<p>Before you get started, please clone the deployment repository from our GitHub:</p> <pre><code>git clone https://github.com/WiMoVE-OSS/deployment.git\n</code></pre>"},{"location":"setup/ansible_setup/#configure-the-inventory","title":"Configure the Inventory","text":"<p>First, you have to set up your Ansible inventory. This file decides which devices will be provisioned by the Ansible playbook.</p> <p>To get started, rename the file <code>example-inventory.yml</code> to <code>inventory.yml</code>.</p> <p>Warning: A note on IP ranges</p> <p>This playbook is designed to use the IP range <code>10.0.0.0/8</code> for the virtual L2 networks. If you use (part of) this IP range for your network already, consider modifying the dnsmasq and VXLAN configuration in the gateway folder to suit your requirements.</p>"},{"location":"setup/ansible_setup/#set-wi-fi-parameters","title":"Set Wi-Fi Parameters","text":"<p>First things first, you need to set a name for your wireless network. Put this name in the <code>ssid</code> variable. The passphrase for the network goes into the <code>secret</code> variable.</p> <p>If you want to use 802.11r fast transition, you have to set the <code>fast_transition</code> variable to 1.</p> <p>Warning</p> <p>In our testing, we experienced some issues with using FT on some of our APs (especially ZyXel NWA50AX). So make sure your hardware (both AP and stations) support this feature before you enable it in a production environment.</p>"},{"location":"setup/ansible_setup/#set-a-log-server","title":"Set a Log Server","text":"<p>Our Ansible playbook sets up <code>syslog-ng</code> as a syslog backend. It supports forwarding all logs to a log server. This has proven to be quite useful in our testing setups. If you want to set up a logging server for yourself, we recommend getting started with this repository.</p> <p>If you do not want to use this feature, simply set <code>127.0.0.1</code> as the parameter for <code>log_server</code>, otherwise put the IP/domain of your log server here.</p>"},{"location":"setup/ansible_setup/#set-route-reflector-configuration","title":"Set Route Reflector Configuration","text":"<p>Please set the IP address of the route reflector in the variable <code>route_reflector_ip</code>. Additionally, please set an IP range from which the route reflector should accept connections (i.e. <code>10.242.0.0/16</code>) in the <code>listen_range</code> variable.</p>"},{"location":"setup/ansible_setup/#set-gateway-configuration","title":"Set Gateway Configuration","text":"<p>For the gateway, you need to additionally configure the names of the network interfaces that are used.</p> <ul> <li><code>uplink_if</code> is the interface that will be used for internet access for the overlay networks</li> <li><code>wimove_if</code> is the interface that will be connected to the L3 environment where all APs can be reached</li> </ul> <p>By default, we assume that the same interface is used for both internet access and the APs. If this is not the case, uncomment and edit the <code>wimove_if</code> line in the inventory.</p> <p>Tip</p> <p>You can combine the gateway and route reflector into one machine. To do this, simply put the same host into both the <code>routeReflectors</code> and <code>gateways</code> group.</p>"},{"location":"setup/ansible_setup/#set-number-of-vnis","title":"Set Number of VNIs","text":"<p>You lastly have to decide how many virtual L2 networks you want to provide.</p> <p>The ansible playbook theoretically supports up to 65.000 VNIs but we recommend starting with a small number (i.e. 20) to get started and scale up later. The reason for this is the fact that the large number of network interfaces on the gateway can result in a very long boot time which you likely do not want in a testing scenario.</p>"},{"location":"setup/ansible_setup/#setting-hosts","title":"Setting Hosts","text":"<p>Take a look at the hosts section of the inventory file. There, you can see a number of groups. For route reflector and gateway, please insert the corresponding IP addresses.</p> <p>For the AP section, please put the different types of APs with their names and IP addresses in the inventory.</p>"},{"location":"setup/ansible_setup/#optional-deploy-to-different-aps","title":"(Optional) Deploy to Different APs","text":"<p>The Ansible playbook currently supports two different types of APs. <code>zyxel</code> and <code>linksys</code>. If you want to have more or other models, you just have to create the directories and in <code>roles/access-point/{files,templates}/model-name</code>. Then you can add a new group to the children of the group <code>openwrt</code> in the inventory and set the <code>directory</code> variable accordingly. Then follow the next steps.</p>"},{"location":"setup/ansible_setup/#gather-binaries","title":"Gather Binaries","text":"<ol> <li>Find out which architecture your access point uses by looking it up on the OpenWrt Table of Hardware.</li> <li>Download the package for the matching architecture for your access point. There are three ways to achieve this:<ol> <li>Download the binary from the latest release on the Releases Page</li> <li>Download the binary from a recent pipeline run in our GitHub Repository</li> <li>Cross-Compile it yourself. See the Development Guide for details.</li> </ol> </li> <li>Place the binary in the corresponding folder for your AP type. The filepath is <code>roles/access-point/files/model-name</code>. Make sure that it has the file extension <code>.ipk</code> and it is the only <code>.ipk</code> file in that directory.</li> </ol> <p>Tip</p> <p>You can use arbitrary model names. The <code>directory</code> variable for a host only has to match the directory name in <code>roles/access-points/files</code> to get the correct binary.</p>"},{"location":"setup/ansible_setup/#generate-openwrt-configuration-files","title":"Generate OpenWrt Configuration Files","text":"<p>Since each AP is different, you need different configuration files for each model. For this reason, we do not provide complete configuration files but rather guide you how to create them yourself.</p> <ol> <li>Go to the web interface of one of your APs running OpenWrt and configure a WPA2-PSK wireless network for each radio you wish to use. You can set any SSID and password, you will overwrite them in a minute. Make sure to press save at the end.</li> <li> <p>Open an SSH console to the AP and run</p> <p><pre><code>uci export\n</code></pre> to export the configuration for the AP.</p> </li> <li> <p>Copy the output of the command and place it in a file called <code>config.ota.j2</code> in the folder <code>roles/access-point/templates/model-name</code> that corresponds to your AP type in the ansible playbook.</p> </li> <li>Open the file in a text editor.</li> <li>Go to the end of the file. There, you should find a section for each wireless network you configured in the previous step.</li> <li> <p>Adjust each of these <code>wifi-iface</code> sections so that they contain the following lines:</p> <pre><code>option ssid '{{ ssid }}'\noption isolate '1'\noption key '{{ secret }}'\noption ieee80211r '{{ fast_transition }}'\noption mobility_domain '0101'\noption reassociation_deadline '1000'\noption ft_over_ds '{{ ft_over_ds }}'\noption ft_psk_generate_local '1'\noption per_sta_vif '1'\noption vlan_file '/etc/hostapd.vlan'\n</code></pre> <p>Warning</p> <p>Make sure that there are no two lines with the same name in each of the <code>wifi-iface</code> sections of the file. Otherwise, OpenWrt will later not accept the configuration.</p> </li> </ol>"},{"location":"setup/ansible_setup/#installing-dependencies-for-ansible-and-running-the-playbook","title":"Installing Dependencies for Ansible and Running the Playbook","text":"<p>You have now configured all parameters for your Wi-Fi setup. Congratulations!</p> <p>Now, all that is left to do is to actually deploy it on your hardware.</p>"},{"location":"setup/ansible_setup/#install-dependencies","title":"Install Dependencies","text":"<p>We use an Ansible plugin to provision OpenWrt. This plugin needs to be installed by running <pre><code>ansible-galaxy install -r requirements.yml\n</code></pre> in the repo folder.</p>"},{"location":"setup/ansible_setup/#preparing-the-run","title":"Preparing the Run","text":"<p>Before you run the playbook, you have to make sure that you can connect to all APs and other machines via SSH. For this to work properly, you have to set up SSH key authentication on each of the devices.</p> <p>Tip</p> <p>To copy your SSH key to your APs, you can either use the OpenWrt web interface or the typical <code>ssh-copy-id</code> command.</p>"},{"location":"setup/ansible_setup/#ssh-setup","title":"SSH setup","text":"<p>Please make sure that your SSH config file contains all the hostnames you gave to the hosts in your inventory. Otherwise, when running the playbook you will get an error that the name could not be resolved.</p>"},{"location":"setup/ansible_setup/#running-the-playbook","title":"Running the Playbook","text":"<p>Before you run the playbook: A note on SSH key passphrases</p> <p>Ansible attempts to open multiple SSH connections over the process of running a playbook. If you have configured a passphrase for your private key (as is generally a good idea), this will result in many password prompts.</p> <p>To prevent this, we recommend using <code>ssh-agent</code> to cache the unencrypted private key in the current terminal.</p> <p>To get started, open the terminal in which you want to run ansible later. Then execute <pre><code>eval \"$(ssh-agent -s)\"\n</code></pre> to start ssh-agent. Now, you need to load your private key by running (depending on the location of your key file) <pre><code>ssh-add ~/.ssh/id_rsa\n</code></pre> This will prompt you for the passphrase of your key. After you entered the passphrase, you will not be prompted for it again in that terminal session.</p> <p>To finally run the playbook, execute <pre><code>ansible-playbook -i inventory.yml install.yml -K\n</code></pre></p>"},{"location":"setup/manual/","title":"Manual Setup","text":"<p>This guide will show you how you can set up your own WiMoVE environment manually. Please make sure to follow the guide accurately.</p> <p>Tip</p> <p>Setting up WiMoVE manually can be quite a complex task. In case you run into problems, feel free to take a look at the Ansible deployment scripts or Create a new Issue.</p> <p>Before you get started</p> <p>It is a very good idea to at least skim over the different steps of this guide so you know what to expect before you try to set up your own system.</p>"},{"location":"setup/manual/#getting-to-know-the-components","title":"Getting to Know the Components","text":"<p>The parts of this guide will provide information on how to set up each component. Before getting started, please make sure you understand the purpose of each component in the whole system by reading the Architecture page.</p> <p>WiMoVE provides a package you can install on your OpenWrt router but needs some additional services in your network to be useful:</p> <ul> <li>The gateway is responsible for terminating the overlay networks and provide internet access.</li> <li>The route reflector is part of the control plane. It receives routing information and distributes the information to the access points and the gateway.</li> </ul>"},{"location":"setup/manual/#deciding-on-parameters","title":"Deciding on Parameters","text":"<p>There are a number of parameters you will need to decide on when you want to set up your own WiMoVE system.</p> <p>Please take a look at the following page and decide on parameters before you get going.</p> <p>Parameter Guide</p>"},{"location":"setup/manual/access_point/","title":"Setting Up an Access Point","text":"<p>This part of the guide will show you how to set up wimoved on your OpenWrt Access Point.</p> <p>Info</p> <p>OpenWrt is available for a large number of different types of access points. Different APs may use different processor architectures. For this reason, you need a version of wimoved that is compatible with your architecture.</p> <p>We try to provide builds for as many architectures as reasonably possible. If you have OpenWrt hardware you would like to see supported, please open an issue.</p> <p>Tip</p> <p>The AP needs to have an internet connection to be able to install dependencies.</p>"},{"location":"setup/manual/access_point/#preparing-your-ap","title":"Preparing Your AP","text":"<ol> <li>Verify that you have SSH connectivity to the access point. If not, take a look at the OpenWrt guide for SSH.</li> </ol> <p>Info</p> <p>Unless specified otherwise, all commands given in this guide should be run in the shell of the Access Point.</p>"},{"location":"setup/manual/access_point/#setting-up-hostapd","title":"Setting Up Hostapd","text":""},{"location":"setup/manual/access_point/#installing-the-correct-version-of-hostapd","title":"Installing The Correct Version of Hostapd","text":"<p>Regular OpenWrt setups come with a stripped-down version of hostapd called <code>wpad</code> or <code>wpad-mini</code>. These do however not come with all features we require for our setup.</p> <ol> <li>Uninstall the unneeded <code>wpad-mini</code> <pre><code>opkg update\nopkg remove wpad-mini\nopkg install hostapd\n</code></pre></li> <li>Reboot the Access Point</li> </ol>"},{"location":"setup/manual/access_point/#configuring-hostapd","title":"Configuring Hostapd","text":"<p>OpenWrt generates the hostapd configuration file <code>hostapd.conf</code> from the OpenWrt wireless configuration. This configuration can be edited via the web interface or by modifying the file located at <code>/etc/config/wireless</code>. We will now guide you on how to set up hostapd on your AP.</p> <ol> <li>Go to the web interface of the AP and configure a WPA2-PSK wireless network for each radio you wish to use. Make sure to press save at the end.</li> <li> <p>Open the file <code>/etc/config/wireless</code> in a text editor.</p> <p>Tip</p> <p>OpenWrt only comes with a version of <code>vi</code> out of the box. If you are not comfortable with vim, you can also install the nano editor by running <pre><code>opkg update &amp;&amp; opkg install nano\n</code></pre></p> </li> <li> <p>Go to the end of the file. There, you should find a section for each wireless network you configured in the previous step.</p> </li> <li> <p>Add the following lines to each of these sections and save the file.</p> <pre><code>option isolate '1'\noption per_sta_vif '1'\noption vlan_file '/etc/hostapd.vlan'\n</code></pre> </li> <li> <p>Create a file called <code>/etc/hostapd.vlan</code> with the following content</p> <pre><code>*   vlan#\n</code></pre> </li> <li> <p>Restart the AP</p> </li> </ol> <p>When connecting to the Wi-Fi network you just created, you should see that an interface with the name <code>vlan*</code> gets created where * is an arbitrary number. The interface should disappear after the station disconnects. If you do not see the interfaces, recheck that you followed the guide exactly.</p>"},{"location":"setup/manual/access_point/#setting-up-frr","title":"Setting Up FRR","text":"<p>FRRouting is used to enable the control plane of the underlying VXLAN EVPN networks. It needs to be installed on each AP and configured to talk to the route reflector in your network.</p> <ol> <li> <p>Install <code>frr</code> by running</p> <pre><code>opkg update &amp;&amp; opkg install frr-bgpd frr-zebra frr-watchfrr frr-vtysh\n</code></pre> </li> <li> <p>Create the file <code>/etc/frr/frr.conf</code> with the following content and replacing the placeholders with the corresponding IP addresses in your network:</p> /etc/frr/frr.conf <pre><code>log syslog informational\nip nht resolve-via-default\nip6 nht resolve-via-default\nrouter bgp 65000\nbgp router-id &lt;YOUR AP IP&gt;\nno bgp default ipv4-unicast\nneighbor fabric peer-group\nneighbor fabric remote-as 65000\nneighbor fabric capability extended-nexthop\nneighbor fabric ebgp-multihop 5\n! BGP sessions with route reflectors\nneighbor &lt;YOUR ROUTE REFLECTOR IP&gt; peer-group fabric\n!\naddress-family l2vpn evpn\nneighbor fabric activate\nadvertise-all-vni\nexit-address-family\n!\n!\n</code></pre> </li> <li> <p>Create the file <code>/etc/frr/daemons</code> with the following content:</p> /etc/frr/daemons <pre><code>bgpd=yes\nospfd=no\nospf6d=no\nripd=no\nripngd=no\nisisd=no\npimd=no\nldpd=no\nnhrpd=no\neigrpd=no\nbabeld=no\nsharpd=no\npathd=no\npbrd=no\nbfdd=no\nfabricd=no\nvrrpd=no\n\n\nvtysh_enable=yes\nzebra_options=\"  -A 127.0.0.1 -s 90000000\"\nbgpd_options=\"   -A 127.0.0.1\"\nospfd_options=\"  -A 127.0.0.1\"\nospf6d_options=\" -A ::1\"\nripd_options=\"   -A 127.0.0.1\"\nripngd_options=\" -A ::1\"\nisisd_options=\"  -A 127.0.0.1\"\npimd_options=\"   -A 127.0.0.1\"\nldpd_options=\"   -A 127.0.0.1\"\nnhrpd_options=\"  -A 127.0.0.1\"\neigrpd_options=\" -A 127.0.0.1\"\nbabeld_options=\" -A 127.0.0.1\"\nsharpd_options=\" -A 127.0.0.1\"\npbrd_options=\"   -A 127.0.0.1\"\nstaticd_options=\"-A 127.0.0.1\"\nbfdd_options=\"   -A 127.0.0.1\"\nfabricd_options=\"-A 127.0.0.1\"\nvrrpd_options=\"  -A 127.0.0.1\"\n</code></pre> </li> <li> <p>Restart <code>frr</code> by running <code>service frr restart</code>.</p> </li> </ol> <p>You can check the configuration of FRR using the <code>vtysh</code> command. This command provides a stateful shell to manipulate FRR. More detailed documentation about vtysh can be found here.</p>"},{"location":"setup/manual/access_point/#setting-up-wimoved","title":"Setting Up wimoved","text":"<p>wimoved is the daemon we provide that enables all Access Point features required for WiMoVE. It as well as all other dependencies need to be installed in every AP in your Wi\u2011Fi system.</p>"},{"location":"setup/manual/access_point/#obtaining-the-correct-binary","title":"Obtaining the Correct Binary","text":"<ol> <li>Find out which architecture your access point uses by looking it up on the OpenWrt Table of Hardware.</li> <li>Get the package for the matching architecture for your access point. There are three ways to achieve this:<ol> <li>Download the binary from the latest release on the Releases Page</li> <li>Download the binary from a recent pipeline run in our GitHub Repository</li> <li>Cross-Compile it yourself. See the Development Guide for details.</li> </ol> </li> </ol>"},{"location":"setup/manual/access_point/#copying-wimoved-to-your-ap-via-ssh","title":"Copying Wimoved to Your AP Via SSH","text":"<p>Info</p> <p>The commands in this section need to be run on your computer, not the AP</p> <ol> <li> <p>Copy the package from your computer to the access point via SCP</p> <pre><code>scp -O &lt;Path to WiMoVE on your machine&gt; root@&lt;YOUR AP IP-ADDRESS&gt;:\n</code></pre> </li> <li> <p>Login to you AP via ssh</p> <p><pre><code>ssh root@&lt;YOUR AP IP-ADDRESS&gt;\n</code></pre> All further commands will now again need to be run on your AP.</p> </li> </ol>"},{"location":"setup/manual/access_point/#installing-wimoved","title":"Installing Wimoved","text":"<ol> <li> <p>Install the package on your access point via</p> <pre><code>opkg update &amp;&amp; opkg install &lt;Path to wimoved&gt;`\n</code></pre> </li> <li> <p>Run <code>wimoved</code>. You should see an error message, showing that wimoved was installed successfully.</p> </li> </ol>"},{"location":"setup/manual/access_point/#configuring-wimoved","title":"Configuring Wimoved","text":"<p>The wimoved config file is located at <code>/etc/wimoved/config</code>. Before we can use the AP, you need to fill this file with some information about your installation.</p> <ol> <li>Create a file located at <code>/etc/wimoved/config</code> and fill it with the following lines: <pre><code># The location of the hostapd sockets. Leave like this for regular OpenWrt setup\nhapd_sockdir=/var/run/hostapd\n# Access group for hostapd sockets. Leave unchanged.\nhapd_group=network\n# Interval (seconds) after which interfaces for disconnected stations are removed\ncleanup_interval=30\n# Number of VNIs the stations are assigned to. wimoved will use VNI 1 to n.\nmax_vni=20\n</code></pre></li> </ol> <p>Info</p> <p>There are some more configuration options that can be found in the GitHub repository's readme file. If you have any configuration needs that are not provided by the current configuration options, feel free to open an issue.</p> <p>After a successful configuration, you can run <code>wimoved</code> and it should start without any errors. When connecting with a client, you should see log messages.</p>"},{"location":"setup/manual/gateway/","title":"Gateway","text":"<p>The gateway is responsible for forwarding the internet traffic. We use an Ubuntu server host as the basis for this setup.</p> <p>Note</p> <p>We will provide you with some sample configurations in this chapter. Keep in mind that you likely have to update these for sour specific setup depending on the number of VNIs you want to use and the IP space available to you.</p>"},{"location":"setup/manual/gateway/#setting-up-frr","title":"Setting Up FRR","text":"<ol> <li> <p>Install <code>frr</code> on the gateway.</p> <pre><code>sudo apt install frr\n</code></pre> </li> <li> <p>Create the file <code>sample-configs/gateway/frr.conf</code> with the following content. Remember to insert the IP of the gateway and the route reflector.</p> /etc/frr/daemons <pre><code>log syslog informational\nip nht resolve-via-default\nip6 nht resolve-via-default\nrouter bgp 65000\n  bgp router-id &lt;OWN-IP-ADDRESS&gt;\n  no bgp default ipv4-unicast\n  neighbor fabric peer-group\n  neighbor fabric remote-as 65000\n  ! BGP sessions with route reflectors\n  ! add one line per route reflector\n  neighbor &lt;IP-ADDRESS-OF-ROUTE-REFLECTOR&gt; peer-group fabric\n  !\n  address-family l2vpn evpn\n  neighbor fabric activate\n  advertise-all-vni\n  exit-address-family\n  !\n!\n</code></pre> </li> <li> <p>Create the file <code>/etc/frr/daemons</code> with the following content</p> /etc/frr/daemons <pre><code>bgpd=yes\nospfd=no\nospf6d=no\nripd=no\nripngd=no\nisisd=no\npimd=no\nldpd=no\nnhrpd=no\neigrpd=no\nbabeld=no\nsharpd=no\npathd=no\npbrd=no\nbfdd=no\nfabricd=no\nvrrpd=no\n\n\nvtysh_enable=yes\nzebra_options=\"  -A 127.0.0.1 -s 90000000\"\nbgpd_options=\"   -A 127.0.0.1\"\nospfd_options=\"  -A 127.0.0.1\"\nospf6d_options=\" -A ::1\"\nripd_options=\"   -A 127.0.0.1\"\nripngd_options=\" -A ::1\"\nisisd_options=\"  -A 127.0.0.1\"\npimd_options=\"   -A 127.0.0.1\"\nldpd_options=\"   -A 127.0.0.1\"\nnhrpd_options=\"  -A 127.0.0.1\"\neigrpd_options=\" -A 127.0.0.1\"\nbabeld_options=\" -A 127.0.0.1\"\nsharpd_options=\" -A 127.0.0.1\"\npbrd_options=\"   -A 127.0.0.1\"\nstaticd_options=\"-A 127.0.0.1\"\nbfdd_options=\"   -A 127.0.0.1\"\nfabricd_options=\"-A 127.0.0.1\"\nvrrpd_options=\"  -A 127.0.0.1\"\n</code></pre> <ol> <li>Ensure these configuration files are owned by the <code>frr</code> user and group by running</li> </ol> <pre><code>sudo chown -R frr:frr /etc/frr/\n</code></pre> </li> <li> <p>Ensure that only the <code>frr</code> user has read and write permissions to the file and the <code>frr</code> group can read the file. All other users should not have any access. To achieve this, run</p> <pre><code>sudo chmod 640 /etc/frr/*\n</code></pre> </li> <li> <p>Restart <code>frr</code> by executing</p> <pre><code>sudo systemctl restart frr\n</code></pre> </li> </ol>"},{"location":"setup/manual/gateway/#setting-up-vxlan-interfaces-and-bridges","title":"Setting Up VXLAN Interfaces and Bridges","text":"<p>We will use the Ubuntu tool <code>netplan</code> to set up and persist the required network devices. Check below for a method without the need for netplan.</p> <ol> <li> <p>Overwrite the file <code>/etc/netplan/00-installer-config.yaml</code> with the following content. Remember to replace the interface name for your current internet connection and set the local IP address.</p> /etc/netplan/00-installer-config.yaml <pre><code>network:\nethernets:\n&lt;UPLINK IF NAME&gt;:\ndhcp4: true\ntunnels:\nvxlan1:\nmode: vxlan\nid: 1\nlocal: &lt;GATEWAY IP&gt;\nttl: 10\nmac-learning: false\nport: 4789\n\nvxlan2:\nmode: vxlan\nid: 2\nlocal: &lt;GATEWAY IP&gt;\nttl: 10\nmac-learning: false\nport: 4789\n\nvxlan3:\nmode: vxlan\nid: 3\nlocal: &lt;GATEWAY IP&gt;\nttl: 10\nmac-learning: false\nport: 4789\n\nbridges:\nbr1:\ninterfaces:\n- vxlan1\nparameters:\nstp: false\naddresses:\n- 10.1.2.1/24\nbr2:\ninterfaces:\n- vxlan2\nparameters:\nstp: false\naddresses:\n- 10.1.3.1/24\nbr3:\ninterfaces:\n- vxlan3\nparameters:\nstp: false\naddresses:\n- 10.1.4.1/24\n</code></pre> <p>Warning</p> <p>This setup is for a very basic gateway. Please make sure you understand what it does and change it for your needs. Especially, you may want to increase the number of VNIs depending on what you set in the APs.</p> <p>Refer back to the parameters you chose for your setup.</p> </li> <li> <p>Restart the machine</p> <p>Tip</p> <p>In theory, using <code>netplan apply</code> should work. In our experience however, this did not give us the desired result so rebooting is the best way to go here.</p> </li> </ol> Setting up VXLANs without netplan <p>As an alternative, you can also set up the interfaces using the <code>ip</code> command directly. Note that these interfaces will not persist on reboot so you have to run the following script on every boot:</p> <pre><code>#!/bin/bash\n# Copied from Vincent Bernat's blog post:\nfor vni in {1..20}; do\n# Create VXLAN interface\nip link add vxlan\"${vni}\" type vxlan\n        id \"${vni}\" \\\ndstport 4789 \\\nnolearning\n    # Create companion bridge\nbrctl addbr br\"${vni}\"\nbrctl addif br\"${vni}\" vxlan\"${vni}\"\nbrctl stp br\"${vni}\" off\n    ip link set up dev br\"${vni}\"\nip a add 10.0.\"${vni}\".1/24 dev br\"${vni}\"\nip link set up dev vxlan\"${vni}\"\ndone\n</code></pre>"},{"location":"setup/manual/gateway/#enable-ip-forwarding","title":"Enable IP Forwarding","text":"<ol> <li>Open the file <code>/etc/sysctl.conf</code> in an editor of your choice with root permissions:     <pre><code>sudo nano /etc/sysctl.conf\n</code></pre></li> <li>Uncomment the line    <pre><code>net.ipv4.ip_forward=1\n</code></pre>    to enable IPv4 forwarding</li> <li> <p>Uncomment the line     <pre><code>net.ipv6.conf.all.forwarding=1\n</code></pre>     to enable IPv6 forwarding</p> </li> <li> <p>Reload the configuration file by executing     <pre><code>sudo sysctl -p\n</code></pre></p> </li> </ol>"},{"location":"setup/manual/gateway/#setting-up-nftables","title":"Setting Up Nftables","text":"<ol> <li> <p>Make sure you have <code>nftables</code> installed by running     <pre><code>nft -v\n</code></pre></p> <p>Tip</p> <p>nftables should come preinstalled with Ubuntu Server 22.04 and later</p> </li> <li> <p>Create/Update the file <code>/etc/nftables.conf</code> with root privileges and paste the following content. You may want to update the <code>vxlans</code> variable to match your setup and set the uplink interface correctly.</p> /etc/nftables.conf <pre><code>#!/usr/sbin/nft -f\n\n# Setup for 3 VNI's\ndefine vxlans = { br1, br2, br3, }\n\ndefine uplink = &lt;Uplink interface&gt;\n\nflush ruleset\n\n# NAT for all VNIs\n\ntable inet filter {\n        chain input {\n                type filter hook input priority filter;\n        }\n        chain forward {\n                type filter hook forward priority filter; policy drop;\n                ct state established, related accept\n                iifname $vxlans oifname $uplink counter accept\n        }\n        chain output {\n                type filter hook output priority filter;\n        }\n        chain postrouting {\n                type nat hook postrouting priority 100; policy accept;\n                iifname $vxlans oifname $uplink masquerade\n        }\n}\n</code></pre> </li> <li> <p>Restart the system</p> </li> </ol>"},{"location":"setup/manual/gateway/#setting-up-dnsmasq","title":"Setting Up Dnsmasq","text":"<ol> <li>Install <code>dnsmasq</code> as a DHCP server on the gateway.     <pre><code>sudo apt install dnsmasq\n</code></pre></li> <li> <p>Update the file <code>/etc/dnsmasq.conf</code> with the following content. You likely need to add more entries for the correct IP ranges when you have more than 3 VNIs in use.</p> <p>Tip</p> <p>Refer back to the parameters you decided on for the IPv4 range for each VNI</p> /etc/dnsmasq.conf <pre><code>interface=br1\ninterface=br2\ninterface=br3\n\nbind-interfaces\nno-resolv\ndhcp-authoritative\n\ndhcp-range=10.0.1.100,10.0.1.200,255.255.255.0,5m\ndhcp-range=10.0.2.100,10.0.2.200,255.255.255.0,5m\ndhcp-range=10.0.3.100,10.0.3.200,255.255.255.0,5m\n</code></pre> </li> <li> <p>Restart dnsmasq</p> <pre><code>sudo systemctl restart dnsmasq\n</code></pre> </li> </ol>"},{"location":"setup/manual/parameters/","title":"Choosing suitable parameters","text":"<p>Every network is different. For this reason, there are a number of parameters in the setup you will need to adapt for your use.</p> <p>This page will guide you through deciding these values for your use case. You can find an example configuration below.</p> Parameter name Example value Network IP range <code>10.242.0.0/16</code> Route Reflector IP Address <code>10.242.0.5</code> Gateway IP Address <code>10.242.0.4</code> Number of VNIs <code>20</code> VNI IPv4 Range Template <code>10.1.X.0/24</code>"},{"location":"setup/manual/parameters/#network-ip-range","title":"Network IP Range","text":"<p>All APs, gateways, and route reflectors need to talk to each other. For this reason, you need L3 connectivity between them. This IP range can be any size, just make sure you know what it is and that all devices inside it can reach each other at least on the following ports:</p> Protocol Port Purpose TCP <code>179</code> BGP UDP <code>4789</code> VXLAN"},{"location":"setup/manual/parameters/#gateway-ip-address","title":"Gateway IP Address","text":"<p>This is the IP address where the gateway can be reached.</p>"},{"location":"setup/manual/parameters/#route-reflector-ip-address","title":"Route Reflector IP Address","text":"<p>This is the IP address at which the route reflector can be reached for both the APs and the gateway.</p> <p>The functionality of the route reflector can also be included in the gateway. This is however currently only described in the Ansible deployment guide. You will need to combine the FRR configuration files for the route reflector and gateway to get this to work.</p>"},{"location":"setup/manual/parameters/#number-of-vnis","title":"Number of VNIs","text":"<p>This number decides how many virtual L2 networks will be created and devices will be split up into. In theory, any 24-Bit number can be chosen. However, in practice, this number is limited by how many network interfaces your gateway can support. We recommend getting started with a number around 20 and scaling up if VXLANs get too crowded.</p>"},{"location":"setup/manual/parameters/#vni-ipv4-range-template","title":"VNI IPv4 Range Template","text":"<p>Each VNI needs its own IP range that will then be used to assign IP addresses via DHCP.</p> <p>For the gateway to work properly, you have to ensure that these IP ranges do not overlap each other. Additionally, these ranges should not overlap any IP ranges the gateway has access to, i.e., the company intranet.</p> <p>The exact template you decide on depends on how many VNIs you have as well as how many devices you expect to be in every L2 network.</p>"},{"location":"setup/manual/route_reflector/","title":"Setting Up a Route Reflector","text":"<p>In addition to the access points, we use a route reflector to build our control plane. A route reflector can be any kind of machine where FRR can be installed. It just needs a L3 connection to the access points and the gateway. We again use an Ubuntu server host for this tutorial.</p>"},{"location":"setup/manual/route_reflector/#setting-up-frr","title":"Setting Up FRR","text":"<p>Warning</p> <p>This part of the guide is very similar to the one for the gateway. However, the configuration files for FRR are different in this case.</p> <ol> <li> <p>Install <code>frr</code> on the gateway.</p> <pre><code>sudo apt install frr\n</code></pre> </li> <li> <p>Create the file <code>sample-configs/gateway/frr.conf</code> with the following content. Remember to insert the IP of the route reflector.</p> /etc/frr/daemons <pre><code>log syslog informational\nip nht resolve-via-default\nip6 nht resolve-via-default\nrouter bgp 65000\n  bgp router-id &lt;OWN-IP-ADDRESS&gt;\n  bgp cluster-id &lt;OWN-IP-ADDRESS&gt;\n  bgp log-neighbor-changes\n  no bgp default ipv4-unicast\n  neighbor fabric peer-group\n  neighbor fabric remote-as 65000\n  neighbor fabric capability extended-nexthop\n  neighbor fabric ebgp-multihop 5\n  neighbor fabric update-source &lt;OWN-IP-ADDRESS&gt;\n  bgp listen range &lt;ALL-AP-SUBNETS-CIDR-NOTATION&gt; peer-group fabric\n  !\n  address-family l2vpn evpn\n  neighbor fabric activate\n  neighbor fabric route-reflector-client\n  exit-address-family\n  !\n!\n</code></pre> </li> <li> <p>Create the file <code>/etc/frr/daemons</code> with the following content</p> /etc/frr/daemons <pre><code>bgpd=yes\nospfd=no\nospf6d=no\nripd=no\nripngd=no\nisisd=no\npimd=no\nldpd=no\nnhrpd=no\neigrpd=no\nbabeld=no\nsharpd=no\npathd=no\npbrd=no\nbfdd=no\nfabricd=no\nvrrpd=no\n\n\nvtysh_enable=yes\nzebra_options=\"  -A 127.0.0.1 -s 90000000\"\nbgpd_options=\"   -A 127.0.0.1\"\nospfd_options=\"  -A 127.0.0.1\"\nospf6d_options=\" -A ::1\"\nripd_options=\"   -A 127.0.0.1\"\nripngd_options=\" -A ::1\"\nisisd_options=\"  -A 127.0.0.1\"\npimd_options=\"   -A 127.0.0.1\"\nldpd_options=\"   -A 127.0.0.1\"\nnhrpd_options=\"  -A 127.0.0.1\"\neigrpd_options=\" -A 127.0.0.1\"\nbabeld_options=\" -A 127.0.0.1\"\nsharpd_options=\" -A 127.0.0.1\"\npbrd_options=\"   -A 127.0.0.1\"\nstaticd_options=\"-A 127.0.0.1\"\nbfdd_options=\"   -A 127.0.0.1\"\nfabricd_options=\"-A 127.0.0.1\"\nvrrpd_options=\"  -A 127.0.0.1\"\n</code></pre> </li> <li> <p>Ensure these configuration files are owned by the <code>frr</code> user and group by running</p> <pre><code>sudo chown -R frr:frr /etc/frr/\n</code></pre> </li> <li> <p>Ensure that only the <code>frr</code> user has read and write permissions to the file and the <code>frr</code> group can read the file. All other users should not have any access. To achieve this, run</p> <pre><code>sudo chmod 640 /etc/frr/*\n</code></pre> </li> <li> <p>Restart <code>frr</code> by executing</p> <pre><code>sudo systemctl restart frr\n</code></pre> </li> </ol>"},{"location":"setup/manual/route_reflector/#verifying-the-setup","title":"Verifying the Setup","text":"<p>If you already configured an access point, you can verify the peering by running:</p> <pre><code>$ sudo vtysh\nrr# show bgp neighbor\n</code></pre> <p>It should say that the connection to the access point has been established.</p>"}]}